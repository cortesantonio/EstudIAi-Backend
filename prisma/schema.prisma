generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id              Int               @id @default(autoincrement())
  email           String            @unique
  avatarUrl       String?
  birthdate       DateTime
  name            String
  password        String
  groupMembers    GroupMember[]
  SessionAnswered SessionAnswered[]
  StudyGroup      StudyGroup[]
}

model StudyGroup {
  id           Int           @id @default(autoincrement())
  hexColor     String?
  name         String
  adminId      Int
  isActive     Boolean
  inviteCode   Int           @unique
  Document     Document[]
  groupMembers GroupMember[]
  Session      Session[]
  admin        User          @relation(fields: [adminId], references: [id])
}

model GroupMember {
  id           Int        @id @default(autoincrement())
  userId       Int
  studyGroupId Int
  joinedAt     DateTime   @default(now())
  role         Role
  studyGroup   StudyGroup @relation(fields: [studyGroupId], references: [id])
  user         User       @relation(fields: [userId], references: [id])

  @@unique([studyGroupId, userId])
}

model Document {
  id            Int        @id @default(autoincrement())
  studyGroupId  Int
  title         String
  fileUrl       String
  extractedText String
  uploadedAt    DateTime
  studyGroup    StudyGroup @relation(fields: [studyGroupId], references: [id])
  Question      Question[]
}

model Session {
  id              Int               @id @default(autoincrement())
  studyGroupId    Int
  title           String
  description     String?
  duration        Int
  createdAt       DateTime
  studyGroup      StudyGroup        @relation(fields: [studyGroupId], references: [id])
  SessionAnswered SessionAnswered[]
}

model Question {
  id                 Int       @id @default(autoincrement())
  answerOptions      String[]
  correctOptionIndex Int
  generatedBy        Role
  Document           Document? @relation(fields: [documentId], references: [id])
  documentId         Int?
}

model SessionAnswered {
  id         Int      @id @default(autoincrement())
  sessionId  Int
  userId     Int
  answeredAt DateTime
  score      Int
  session    Session  @relation(fields: [sessionId], references: [id])
  user       User     @relation(fields: [userId], references: [id])

  @@unique([sessionId, userId])
}

enum Role {
  MEMBER
  ADMIN
}

enum Method {
  IA
  MANUAL
}
